#! /bin/sh

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# first move away any on-disk changes so we're actually validating
# what's staged to be committed and not just what's on disk.
# historically, we used stash here, but it turned out to be buggy.
patch_filename=/tmp/stash.$$
git diff --exit-code --binary --ignore-submodules --no-color > $patch_filename
has_unstaged_changes=$?

if [[ $has_unstaged_changes != 0 ]]; then
  echo "Stashing unstaged changes in $patch_filename."
  git checkout -- .
fi

function quit {
  # now recover diffs to get back to pre commit state if needed.
  if [[ $has_unstaged_changes != 0 ]]; then
    git apply $patch_filename
    if [[ $? != 0 ]]; then
      git checkout -- .
      git apply $patch_filename
    fi
  fi

  rm -f $patch_filename
  exit $1
}

# Redirect output to stderr.
exec 1>&2

EXITCODE=0
for file in `git diff-index --cached --diff-filter=ACM --name-only $against`
do
  echo "Validating ${file}..."

  case "${file##*.}" in
    "pp")  puppet parser validate ${file}
           ;;

    "epp") puppet epp validate ${file}
           ;;

    "erb") /opt/puppetlabs/puppet/bin/erb -P -x -T '-' ${file} | /opt/puppetlabs/puppet/bin/ruby -c >/dev/null
           ;;

    "yaml") /opt/puppetlabs/puppet/bin/ruby -ryaml -e "YAML.load_file '${file}'" >/dev/null
           ;;

  esac

  EXITCODE=$((EXITCODE + $?))
done

if [ $EXITCODE -ne 0 ]
then
  echo
  echo "################################################################"
  echo -e "### \033[31mPlease fix the errors above before committing your code.\033[0m ###"
  echo "################################################################"
  echo
fi

if [[ -s $patch_filename ]]
then
  echo
  echo "################################################################"
  echo "###                                                          ###"
  echo -e "###     \033[31mDid you remember to git add your updated code?\033[0m       ###"
  echo "###                                                          ###"
  echo "################################################################"
  echo
fi

# under certain circumstances (when you git commit and your CWD hasn't been added to the commit stage)
# then Bash can lose track of your CWD and subsequent commands fail unexpectedly. This *should* recover it.
cd && cd -

quit $EXITCODE
